function bc_upSetPlot(qMetric, param, qMetricNames, figHandle)
% implementation of the lovely https://upset.app/implementations/ in matlab 

% get sets 

if param.computeDistanceMetrics && ~isnan(param.isoDmin)
    setsw = {find(qMetric.nPeaks > param.maxNPeaks), find(qMetric.nTroughs > param.maxNTroughs), ...
        find(qMetric.waveformBaselineFlatness >= param.maxWvBaselineFraction), ...
        find(qMetric.spatialDecaySlope <= param.minSpatialDecaySlope), ...
        find(qMetric.waveformDuration_peakTrough < param.minWvDuration | qMetric.waveformDuration_peakTrough > param.maxWvDuration), ...
        find(qMetric.isSomatic == 0), find(qMetric.RPV_tauR_estimate > param.maxRPVviolations), ...
        find(qMetric.percentageSpikesMissing_gaussian > param.maxPercSpikesMissing), ...
        find(qMetric.nSpikes <= param.minNumSpikes), find(qMetric.rawAmplitude <= param.minAmplitude), ...
        find(qMetric.signalToNoiseRatio <= param.minSignalToNoiseRatio), find(qMetric.maxDriftEstimate <= param.maxDrift),...
        find(qMetric.isoD <= param.isoDmin), find(qMetric.Lratio >= param.lratioMax)};
else
    setsw = {find(qMetric.nPeaks > param.maxNPeaks), find(qMetric.nTroughs > param.maxNTroughs), ...
        find(qMetric.waveformBaselineFlatness >= param.maxWvBaselineFraction), ...
        find(qMetric.spatialDecaySlope <= param.minSpatialDecaySlope), ...
        find(qMetric.waveformDuration_peakTrough < param.minWvDuration | qMetric.waveformDuration_peakTrough > param.maxWvDuration), ...
        find(qMetric.isSomatic == 0), find(qMetric.RPV_tauR_estimate> param.maxRPVviolations), ...
        find(qMetric.percentageSpikesMissing_gaussian > param.maxPercSpikesMissing), ...
        find(qMetric.nSpikes <= param.minNumSpikes), find(qMetric.rawAmplitude <= param.minAmplitude),...
        find(qMetric.signalToNoiseRatio <= param.minSignalToNoiseRatio), find(qMetric.maxDriftEstimate <= param.maxDrift)};
end

% get possible combinations 
noiseCombinations = arrayfun(@(x) nchoosek(1:6,x), 1:6, 'UniformOutput', false);
muaCombinations = arrayfun(@(x) nchoosek(7:size(setsw,2),x), 1:size(setsw,2)-7, 'UniformOutput', false);

% get counts for each combination

